@inject WineApp.Domain.Wine.IWineService WineService

@if(isLoading)
{
    <div class="center-loading">
        <LoadingComponent />
    </div>
}
else
{
    @if (!string.IsNullOrEmpty(errorString))
    {
        <HxAlert Color="ThemeColor.Danger">@errorString</HxAlert>
    }
    else
    {
        <HxTabPanel 
            InitialActiveTabId="overview"
            RenderMode="TabPanelRenderMode.ActiveTabOnly">
            <HxTab 
                Id="overview"
                Title="Overview"
                TitleTemplate="OverViewFlag"
                OnTabActivated="SetAverageRating">
                <Content>
                    <div class="fade-in">
                        <div class="spacer" />
                        @if (Wine.Ratings.Any())
                        {
                            <MudRating SelectedValue="@averageRating"
                                       MaxValue="10"
                                       ReadOnly="true" />
                        }
                        <div class="spacer" />
                        <WineDetailComponent Wine="@Wine"/>
                    </div>
                </Content>
            </HxTab>
            <HxTab 
                Id="vineyard"
                Title="Vineyard Estate">
                <Content>
                    <div class="fade-in">
                        <div class="spacer" />
                        <p>@Wine.Description is from the @Wine.Region.Name region of @Wine.Region.Country.Name</p>
                        <p>Below is a map, which shows the location of the vineyard '@Wine.VineyardEstate.Name' where @Wine.Description is produced by @Wine.Producer.Name.</p>
                        <MapComponent 
                            Latitude="@Wine.VineyardEstate.Latitude" 
                            Longitude="@Wine.VineyardEstate.Longitude" 
                            Location="@Wine.VineyardEstate.Name"
                            GetCoordinates=false />
                    </div>
                </Content>
            </HxTab>
            <HxTab 
                Id="ratings"
                Title="Ratings"
                TitleTemplate="RatingsFragment">
                <Content>
                    <div class="spacer" />
                    <WineRatingComponent Wine="@Wine" OnSave="UpdateBadges" OnDelete="UpdateBadges"/>
                </Content>
            </HxTab>
            <HxTab 
                Id="prices"
                Title="Prices">
            </HxTab>
            <HxTab 
                Id="issues"
                Title="Issues"
                TitleTemplate="IssuesFragment">
                <Content>
                    <div class="spacer" />
                    <WineIssueComponent Wine="@Wine" OnSave="UpdateBadges" OnDelete="UpdateBadges" />
                </Content>
            </HxTab>
            <HxTab 
                Id="orders"
                Title="Orders">
            </HxTab>
        </HxTabPanel>
    }
}

@code {
    [Parameter]
    public int WineId { get; set; }

    bool isLoading = true;
    string errorString = string.Empty;
    DataContract.Wine Wine = new Wine();
    Uri? flagLocation;
    bool flagExists = false;
    int averageRating;
    bool isEdit = false;
    bool showHalfStar = false;
    int emptyStars = 0;
    RenderFragment RatingsFragment;
    RenderFragment IssuesFragment;
    RenderFragment OverViewFlag;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var result = await WineService.Get(WineId).ConfigureAwait(false);
            if (!result.IsSuccess)
            {
                errorString = result.Error;
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                return;
            }

            Wine = result.Data;
            await SetAverageRating().ConfigureAwait(false);

            showHalfStar = !decimal.IsInteger(averageRating);
            var wholeStars = Convert.ToInt32(averageRating);
            emptyStars = showHalfStar ? (9 - wholeStars) : (10 - wholeStars);

            var flagString = $"{NavigationManager.BaseUri}/images/flags/{Wine.Region.Country.IsoCode.ToLower()}.svg";
            flagLocation = new Uri(flagString);

            isLoading = false;

            UpdateBadges();

            OverViewFlag = (__builder) =>
            {
                <img class="flag-view" src="@flagLocation" />
            };

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
        catch
        {
            errorString = UserTextResponses.ErrorMessage;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            return;
        }
    }

    private void UpdateBadges()
    {
        RatingsFragment = (__builder) =>
        {
            <HxBadge Color="ThemeColor.Primary">@Wine.Ratings.Count()</HxBadge>
        };

        IssuesFragment = (__builder) =>
        {
            <HxBadge Color="ThemeColor.Primary">@Wine.Issues.Count()</HxBadge>
        };
    }

    private async Task SetAverageRating()
    {
        averageRating = 0;

        if (Wine.Ratings.Any())
        {
            int ratingTotal = Wine.Ratings.Sum(x => x.Rating);
            int count = Wine.Ratings.Count();

            averageRating = (ratingTotal / count);
        }

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }
}

@inject WineApp.Domain.IRequestService RequestService

@if (!string.IsNullOrEmpty(errorMessage))
{
    <HxAlert Color="ThemeColor.Danger">@errorMessage</HxAlert>
}

<EditForm 
    Model="@RatingViewModel"
    OnValidSubmit=@Save>
    <DataAnnotationsValidator />
    <HxSelect 
        TItem="DrinkerSelect"
        TValue="int?"
        Label="Drinker"
        Data="@drinkers"
        @bind-Value="@drinkerId"
        TextSelector="@(p => p.Name)"
        ValueSelector="@(p => p.Id)"
        Nullable="true"
        NullDataText="Loading Drinkers..."/>
    <HxInputNumber 
        LabelType="LabelType.Floating" 
        ValidationMessageMode="ValidationMessageMode.None" 
        @bind-Value="@RatingViewModel.Rating" 
        Label="Rating" />
    <div class="modal-footer">
        <table>
            <tr>
                <td>
                    <HxSubmit 
                        Text="Save" 
                        Color="ThemeColor.Primary" 
                        CssClass="modal-button"/>
                </td>
                <td>
                    <HxButton 
                        Text="Cancel" 
                        Color="ThemeColor.Danger" 
                        OnClick="Cancel" />
                </td>
            </tr>
        </table>
    </div>
</EditForm>

@code {
    [Parameter]
    public RatingViewModel RatingViewModel { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    [Parameter]
    public EventCallback OnSave { get; set; }

    IEnumerable<DrinkerSelect> drinkers;
    string errorMessage = string.Empty;
    int? drinkerId = null;

    protected override async Task OnInitializedAsync()
    {
        var result = await RequestService.GetLookup<DataContract.Drinker>("Drinker").ConfigureAwait(false);
        if (!result.IsSuccess)
        {
            errorMessage = result.Error;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }

        drinkerId = RatingViewModel.DrinkerId == 0 ? null : RatingViewModel.DrinkerId;

        drinkers = DrinkerMapper.Map(result.Data);
    }

    private async Task Save()
    {
        RatingViewModel.DrinkerId = drinkerId.Value;
        await OnSave.InvokeAsync().ConfigureAwait(false);
    }

    private async Task Cancel()
    {
        await OnCancel.InvokeAsync().ConfigureAwait(false);
    }
}

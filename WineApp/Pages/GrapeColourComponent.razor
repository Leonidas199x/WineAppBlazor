@inject WineApp.Domain.GrapeColour.IGrapeColourService GrapeColourService
@inject IGrapeColourMapper GrapeColourMapper

@page "/GrapeColours"

<h3>Grape Colours</h3>

<HxButton Color="ThemeColor.Primary" OnClick="ShowCreateModal" Icon="@BootstrapIcon.Plus" />
<HxButton CssClass= "admin-filter" Color="ThemeColor.Secondary" OnClick="FilterOpen" Icon="@BootstrapIcon.Filter" />

<HxOffcanvas @ref="filter" Title="Filter">
    <BodyTemplate>
        <HxInputText 
            LabelType="LabelType.Floating"
            ValidationMessageMode="ValidationMessageMode.None"
            @bind-Value="@filterColour"
            Label="Colour" />
        <hr />
        <HxButton 
            OnClick="Filter"
            Text="Search"
            Color="ThemeColor.Secondary" />
        <HxButton 
            OnClick="ClearFilter"
            Text="Clear"
            Color="ThemeColor.Dark" />
    </BodyTemplate>
</HxOffcanvas>

@if (gridError)
{
    <HxAlert Color="ThemeColor.Danger">@UserTextResponses.ErrorMessage</HxAlert>
}

@if (!isSearch)
{
    <HxGrid 
        @ref="dataGrid"
        TItem="GrapeColour"
        Responsive="true"
        DataProvider="GetGridData"
        PageSize="10"
        Striped="true">
        <Columns>
            <HxGridColumn 
                HeaderText="Name"
                ItemTextSelector="@(item => item.Colour)"
                SortString="@nameof(GrapeColour.Colour)"
                IsDefaultSortColumn="true" />
            <HxContextMenuGridColumn>
                <HxButton 
                    Text="Edit"
                    Color="ThemeColor.Primary"
                    OnClick="@(() => ShowEditModal(context))">
                </HxButton>
                <HxButton 
                    Text="Delete"
                    Color="ThemeColor.Dark"
                    OnClick="@(() => ShowDeleteModal(context))">
                </HxButton>
            </HxContextMenuGridColumn>
        </Columns>
    </HxGrid>
}

@if (isSearch)
{
    <HxGrid 
        @ref="searchGrid"
        TItem="GrapeColour"
        Responsive="true"
        DataProvider="GetSearchData"
        PageSize="10"
        Striped="true">
        <Columns>
            <HxGridColumn 
                HeaderText="Colour"
                ItemTextSelector="@(item => item.Colour)"
                SortString="@nameof(GrapeColour.Colour)"
                IsDefaultSortColumn="true" />
            <HxContextMenuGridColumn>
                <HxButton 
                    Text="Edit"
                    Color="ThemeColor.Primary"
                    OnClick="@(() => ShowEditModal(context))">
                </HxButton>
                <HxButton 
                    Text="Delete"
                    Color="ThemeColor.Dark"
                    OnClick="@(() => ShowDeleteModal(context))">
                </HxButton>
            </HxContextMenuGridColumn>
        </Columns>
    </HxGrid>
}

<HxModal 
    @ref="deleteColour"
    Size="ModalSize.Regular"
    Title="Delete Grape Colour">
    <BodyTemplate>
        @if (deleteError)
        {
            <HxAlert Color="ThemeColor.Danger">@errorString</HxAlert>
        }
        <p>Are you sure you wish to delete the grape colour '@deleteColour'?</p>
        <p>This action cannot be undone.</p>
        <div class="modal-footer">
            <table>
                <tr>
                    <td>
                        <HxButton Text="Delete" Color="ThemeColor.Danger" OnClick="Delete" />
                    </td>
                    <td>
                        <HxButton Text="Cancel" Color="ThemeColor.Dark" OnClick="CloseDeleteModal" />
                    </td>
                </tr>
            </table>
        </div>
    </BodyTemplate>

</HxModal>
<HxModal 
    @ref="editColour"
    Size="ModalSize.Large"
    Title="Edit Grape Colour">
    <BodyTemplate>
        @if (editError)
        {
            <HxAlert Color="ThemeColor.Danger">@errorString</HxAlert>
        }
        <EditForm 
            Model="@editableGrapeColour"
            OnValidSubmit=@Save>
            <DataAnnotationsValidator />
            <HxInputText LabelType="LabelType.Floating" ValidationMessageMode="ValidationMessageMode.None" @bind-Value="@editableGrapeColour.Colour" Label="Name" />
            <div class="modal-footer">
                <table>
                    <tr>
                        <td>
                            <HxSubmit Text="Save" Color="ThemeColor.Primary" />
                        </td>
                        <td>
                            <HxButton Text="Cancel" Color="ThemeColor.Danger" OnClick="CloseEditModal" />
                        </td>
                    </tr>
                </table>
            </div>
        </EditForm>
    </BodyTemplate>
</HxModal>

@code {
    [Inject] protected IHxMessengerService Messenger { get; set; }

    bool gridError = false;
    bool editError = false;
    bool deleteError = false;
    bool saveError = false;
    bool isEdit = false;
    bool isSearch = false;
    int TotalPages = 0;
    int resultsPerPage = 10;
    string errorString = string.Empty;
    private HxModal editColour = new HxModal();
    private HxModal deleteColour = new HxModal();
    private HxOffcanvas filter;
    GrapeColourViewModel editableGrapeColour;
    EditContext editContext;
    string filterColour = string.Empty;
    private HxGrid<GrapeColour> dataGrid = new HxGrid<GrapeColour>();
    private HxGrid<GrapeColour> searchGrid = new HxGrid<GrapeColour>();
    string deleteGrapeColour = string.Empty;
    int deleteColourId;

    private async Task<GridDataProviderResult<GrapeColour>> GetGridData(GridDataProviderRequest<GrapeColour> request)
    {
        try
        {
            var page = 1;
            if (request.StartIndex > 0)
            {
                page = (request.StartIndex / resultsPerPage) + 1;
            }

            var result = await GrapeColourService.GetAll(page, resultsPerPage).ConfigureAwait(false);

            TotalPages = result.Data.TotalPages;

            return new GridDataProviderResult<GrapeColour>
                {
                    Data = result.Data.Data,
                    TotalCount = result.Data.TotalRecords
                };
        }
        catch (Exception)
        {
            gridError = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);

            return new GridDataProviderResult<GrapeColour>();
        }

    }

    private async Task<GridDataProviderResult<GrapeColour>> GetSearchData(GridDataProviderRequest<GrapeColour> request)
    {
        try
        {
            isSearch = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            var page = 1;
            if (request.StartIndex > 0)
            {
                page = (request.StartIndex / resultsPerPage) + 1;
            }

            var result = await GrapeColourService.Search(filterColour, page, resultsPerPage).ConfigureAwait(false);

            TotalPages = result.Data.TotalPages;

            return new GridDataProviderResult<GrapeColour>
                {
                    Data = result.Data.Data,
                    TotalCount = result.Data.TotalRecords
                };
        }
        catch (Exception)
        {
            gridError = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);

            return new GridDataProviderResult<GrapeColour>();
        }

    }

    private async void ShowEditModal(GrapeColour value)
    {
        try
        {
            await SetEdit(true).ConfigureAwait(false);
            await ClearEditError().ConfigureAwait(false);

            var result = await GrapeColourService.Get(value.Id).ConfigureAwait(false);
            if (!result.IsSuccess)
            {
                editError = true;
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                return;
            }

            editableGrapeColour = GrapeColourMapper.Map(result.Data);

            await InvokeAsync(editColour.ShowAsync).ConfigureAwait(false);
        }
        catch (Exception)
        {
            editError = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

    private async void ShowDeleteModal(GrapeColour value)
    {
        deleteGrapeColour = value.Colour;

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        await InvokeAsync(deleteColour.ShowAsync).ConfigureAwait(false);
    }

    private async Task Save()
    {
        try
        {
            var result = (isEdit) 
                        ? await SaveEdit().ConfigureAwait(false) 
                        : await SaveNew().ConfigureAwait(false);

            if (!result.IsSuccess)
            {
                errorString = result.Error;
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                await ShowEditError().ConfigureAwait(false);
                return;
            }

            await RefreshGrid(isSearch).ConfigureAwait(false);

            Messenger.AddInformation(title: "Success", message: $"Grape Colour '{editableGrapeColour.Colour}' saved successfully.");
            await CloseEditModal();
        }
        catch (Exception)
        {
            await ShowEditError().ConfigureAwait(false);
        }
    }

    private async Task<Result> SaveEdit()
    {
        var colour = GrapeColourMapper.Map(editableGrapeColour);

        return await GrapeColourService.Put(colour).ConfigureAwait(false);
    }

    private async Task<Result> SaveNew()
    {
        var colour = GrapeColourMapper.Map(editableGrapeColour);

        return await GrapeColourService.Post(colour).ConfigureAwait(false);
    }

    private async Task ShowCreateModal()
    {
        await SetEdit(false).ConfigureAwait(false);
        await ClearEditError().ConfigureAwait(false);
        editableGrapeColour = new GrapeColourViewModel();

        await InvokeAsync(editColour.ShowAsync).ConfigureAwait(false);
    }

    private async Task ShowEditError()
    {
        editError = true;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task ClearEditError()
    {
        editError = false;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task CloseEditModal()
    {
        await editColour.HideAsync().ConfigureAwait(false);
    }

    private async Task CloseDeleteModal()
    {
        await deleteColour.HideAsync().ConfigureAwait(false);
    }

    private async Task SetEdit(bool value)
    {
        isEdit = value;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task FilterOpen()
    {
        await filter.ShowAsync();
    }

    private async Task Filter()
    {
        isSearch = true;
        await searchGrid.RefreshDataAsync().ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task ClearFilter()
    {
        isSearch = false;
        filterColour = string.Empty;

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task Delete()
    {
        try
        {
            await GrapeColourService.Delete(deleteColourId).ConfigureAwait(false);

            Messenger.AddInformation(title: "Success", message: $"Grape Colour '{deleteGrapeColour}' deleted successfully.");

            deleteColourId = default;
            deleteGrapeColour = string.Empty;

            await RefreshGrid(isSearch).ConfigureAwait(false);

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            await CloseDeleteModal().ConfigureAwait(false);
        }
        catch (Exception)
        {
            errorString = $"There was an error deleting the grape colour";
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

    private async Task RefreshGrid(bool isSearch)
    {
        if (isSearch)
        {
            await InvokeAsync(searchGrid.RefreshDataAsync).ConfigureAwait(false);

            return;
        }

        await InvokeAsync(dataGrid.RefreshDataAsync).ConfigureAwait(false);
    }
}

@inject WineApp.Domain.Countries.ICountryService CountryService
@inject ICountryMapper CountryMapper

@page "/Countries"

<h3><HxIcon Icon="BootstrapIcon.Globe" CssClass="page-icon" />Countries</h3>

<HxButton Color="ThemeColor.Primary" OnClick="ShowCreateModal" Icon="@BootstrapIcon.Plus" />
<HxButton CssClass="admin-filter" Color="ThemeColor.Secondary" OnClick="FilterOpen" Icon="@BootstrapIcon.Filter" />

<HxOffcanvas @ref="filter" Title="Filter">
    <BodyTemplate>
        <HxInputText 
            LabelType="LabelType.Floating" 
            ValidationMessageMode="ValidationMessageMode.None"
            @bind-Value="@filterName"
            Label="Name" />
        <hr/>
        <HxInputText 
            LabelType="LabelType.Floating" 
            ValidationMessageMode="ValidationMessageMode.None" 
            @bind-Value="@filterIsoCode" 
            Label="ISO Code" />
        <hr/>
        <HxButton 
            OnClick="Filter" 
            Text="Search" 
            Color="ThemeColor.Secondary" />
        <HxButton 
            OnClick="ClearFilter" 
            Text="Clear" 
            Color="ThemeColor.Dark" />
    </BodyTemplate>
</HxOffcanvas>

@if (gridError)
{
    <div class="spacer" />
    <HxAlert Color="ThemeColor.Danger">@UserTextResponses.ErrorMessage</HxAlert>
}

@if (!isSearch)
{
    <HxGrid
        @ref="dataGrid"
        TItem="Country"
        Responsive="true"
        DataProvider="GetGridData"
        PageSize="10"
        Striped="true">
        <Columns>
            <HxGridColumn 
                HeaderText="Name"
                ItemTextSelector="@(item => item.Name)"
                SortString="@nameof(Country.Name)"
                IsDefaultSortColumn="true" />
            <HxGridColumn 
                HeaderText="ISO Code"
                ItemTextSelector="@(item => item.IsoCode)"
                SortString="@nameof(Country.IsoCode)" />
            <HxContextMenuGridColumn>
                <HxButton 
                    Text="Edit"
                    Color="ThemeColor.Primary"
                    OnClick="@(() => ShowEditModal(context))">
                </HxButton>
                <HxButton 
                    Text="Delete"
                    Color="ThemeColor.Dark"
                    OnClick="@(() => ShowDeleteModal(context))">
                </HxButton>
            </HxContextMenuGridColumn>
        </Columns>
    </HxGrid>
}

@if (isSearch)
{
    <HxGrid
        @ref="searchGrid"
        TItem="Country" 
        Responsive="true" 
        DataProvider="GetSearchData" 
        PageSize="10"
        Striped="true">
        <Columns>
            <HxGridColumn 
                HeaderText="Name" 
                ItemTextSelector="@(item => item.Name)" 
                SortString="@nameof(Country.Name)" 
                IsDefaultSortColumn="true"/>
            <HxGridColumn 
                HeaderText="ISO Code" 
                ItemTextSelector="@(item => item.IsoCode)" 
                SortString="@nameof(Country.IsoCode)" />
            <HxContextMenuGridColumn>
                <HxButton 
                    Text="Edit" 
                    Color="ThemeColor.Primary" 
                    OnClick="@(() => ShowEditModal(context))">
                </HxButton>
                <HxButton 
                    Text="Delete"
                     Color="ThemeColor.Dark"
                     OnClick="@(() => ShowDeleteModal(context))">
                </HxButton>
            </HxContextMenuGridColumn>
        </Columns>
    </HxGrid>
}

<HxModal
    @ref="deleteCountry"
    Size="ModalSize.Regular"
    Title="Delete Country">
    <BodyTemplate>
        @if (deleteError)
        {
            <HxAlert Color="ThemeColor.Danger">@errorString</HxAlert>
        }
        <p>Are you sure you wish to delete the country with name '@deleteCountryName'?</p>
        <p>This action cannot be undone.</p>
        <div class="modal-footer">
            <table>
                <tr>
                    <td>
                        <HxButton Text="Delete" Color="ThemeColor.Danger" OnClick="DeleteCountry" />
                    </td>
                    <td>
                        <HxButton Text="Cancel" Color="ThemeColor.Dark" OnClick="CloseDeleteModal" />
                    </td>
                </tr>
            </table>
        </div>
    </BodyTemplate>

</HxModal>
<HxModal 
    @ref="editCountry" 
    Size="ModalSize.Large" 
    Title="@modalText">
    <BodyTemplate>
        @if(editError)
        {
            <HxAlert Color="ThemeColor.Danger">@errorString</HxAlert>
        }

        <HxTabPanel 
            InitialActiveTabId="country-details"
            NavVariant="NavVariant.Tabs">
            <HxTab
                Id="country-details"
                Title="Details">
                <Content>
                    <EditForm 
                        Model="@editableCountry"
                        OnValidSubmit=@Save>
                        <DataAnnotationsValidator />
                        <HxInputText LabelType="LabelType.Floating" ValidationMessageMode="ValidationMessageMode.None" @bind-Value="@editableCountry.Name" Label="Name" />
                        <HxInputText LabelType="LabelType.Floating" ValidationMessageMode="ValidationMessageMode.None" @bind-Value="@editableCountry.IsoCode" Label="ISO Code" />
                        <HxInputTextArea LabelType="LabelType.Floating" Label="Note" @bind-Value="@editableCountry.Note" />
                        <div class="modal-footer">
                            <table>
                                <tr>
                                    <td>
                                        <HxSubmit Text="Save" Color="ThemeColor.Primary" />
                                    </td>
                                    <td>
                                        <HxButton Text="Cancel" Color="ThemeColor.Danger" OnClick="CloseEditModal" />
                                    </td>
                                </tr>
                            </table>
                        </div>
                    </EditForm>
                </Content>
            </HxTab>
            <HxTab 
                Id="country-flag" 
                Title="Flag"
                Enabled="isEdit">
                <Content>
                    <hr />
                    <img class="flag-edit" src="@flagLocation" alt="Sorry, a flag for @editableCountry.IsoCode is not currently available." />
                    <hr />
                </Content>
            </HxTab>
        </HxTabPanel>
    </BodyTemplate>
</HxModal>

@code {
    [Inject] protected IHxMessengerService Messenger { get; set; }

    bool gridError = false;
    bool editError = false;
    bool deleteError = false;
    bool saveError = false;
    bool isEdit = false;
    bool isSearch = false;
    int TotalPages = 0;
    int resultsPerPage = 10;
    string modalText = string.Empty;
    string errorString = string.Empty;
    private HxModal editCountry = new HxModal();
    private HxModal deleteCountry = new HxModal();
    private HxOffcanvas filter;
    CountryViewModel editableCountry;
    Uri flagLocation;
    EditContext editContext;
    string filterName = string.Empty;
    string filterIsoCode = string.Empty;
    private HxGrid<Country> dataGrid = new HxGrid<Country>();
    private HxGrid<Country> searchGrid = new HxGrid<Country>();
    string deleteCountryName = string.Empty;
    int deleteCountryId;

    private async Task<GridDataProviderResult<Country>> GetGridData(GridDataProviderRequest<Country> request)
    {
        try
        {
            var page = 1;
            if (request.StartIndex > 0)
            {
                page = (request.StartIndex / resultsPerPage) + 1;
            }

            var result = await CountryService.GetAll(page, resultsPerPage).ConfigureAwait(false);

            TotalPages = result.Data.TotalPages;

            return new GridDataProviderResult<Country>
                {
                    Data = result.Data.Data,
                    TotalCount = result.Data.TotalRecords
                };
        }
        catch (Exception)
        {
            gridError = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);

            return new GridDataProviderResult<Country>();
        }

    }

    private async Task<GridDataProviderResult<Country>> GetSearchData(GridDataProviderRequest<Country> request)
    {
        try
        {
            isSearch = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            var page = 1;
            if (request.StartIndex > 0)
            {
                page = (request.StartIndex / resultsPerPage) + 1;
            }

            var result = await CountryService.Search(filterName, filterIsoCode, page, resultsPerPage).ConfigureAwait(false);

            TotalPages = result.Data.TotalPages;

            return new GridDataProviderResult<Country>
                {
                    Data = result.Data.Data,
                    TotalCount = result.Data.TotalRecords
                };
        }
        catch (Exception)
        {
            gridError = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);

            return new GridDataProviderResult<Country>();
        }

    }

    private async void ShowEditModal(Country country)
    {
        try
        {
            modalText = $"Edit Country - {country.Name}";
            await SetEdit(true).ConfigureAwait(false);
            await ClearEditError().ConfigureAwait(false);

            var result = await CountryService.Get(country.Id).ConfigureAwait(false);
            if (!result.IsSuccess)
            {
                editError = true;
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                return;
            }

            editableCountry = CountryMapper.Map(result.Data);

            var flagString = $"{NavigationManager.BaseUri}/images/flags/{editableCountry.IsoCode.ToLower()}.svg";
            flagLocation = new Uri(flagString);

            await InvokeAsync(editCountry.ShowAsync).ConfigureAwait(false);
        }
        catch (Exception)
        {
            editError = true;
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

    private async void ShowDeleteModal(Country country)
    {
        deleteCountryName = country.Name;
        deleteCountryId = country.Id;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        await InvokeAsync(deleteCountry.ShowAsync).ConfigureAwait(false);
    }

    private async Task Save()
    {
        try
        {
            var result = isEdit 
                            ? await SaveEdit().ConfigureAwait(false) 
                            : await SaveNew().ConfigureAwait(false);
           
            if (!result.IsSuccess)
            {
                errorString = result.Error;
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                await ShowEditError().ConfigureAwait(false);
                return;
            }

            Messenger.AddInformation(title: "Success", message: $"Country '{editableCountry.Name}' saved successfully.");
            await CloseEditModal();
        }
        catch (Exception)
        {
            await ShowEditError().ConfigureAwait(false);
        }
    }

    private async Task<Result> SaveEdit()
    {
        var country = CountryMapper.Map(editableCountry);

        return await CountryService.Put(country).ConfigureAwait(false);
    }

    private async Task<Result> SaveNew()
    {
        var country = CountryMapper.MapNew(editableCountry);

        return await CountryService.Post(country).ConfigureAwait(false);
    }

    private async Task ShowCreateModal()
    {
        modalText = "Add New Country";
        await SetEdit(false).ConfigureAwait(false);
        await ClearEditError().ConfigureAwait(false);
        editableCountry = new CountryViewModel();

        await InvokeAsync(editCountry.ShowAsync).ConfigureAwait(false);
    }

    private async Task ShowEditError()
    {
        editError = true;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task ClearEditError()
    {
        editError = false;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task CloseEditModal()
    {
        await editCountry.HideAsync().ConfigureAwait(false);
    }

    private async Task CloseDeleteModal()
    {
        await deleteCountry.HideAsync().ConfigureAwait(false);
    }

    private async Task SetEdit(bool value)
    {
        isEdit = value;
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task FilterOpen()
    {
        await filter.ShowAsync();
    }

    private async Task Filter()
    {
        isSearch = true;
        await searchGrid.RefreshDataAsync().ConfigureAwait(false);
        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task ClearFilter()
    {
        isSearch = false;
        filterName = string.Empty;
        filterIsoCode = string.Empty;

        await InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    private async Task DeleteCountry()
    {
        try
        {
            var result = await CountryService.Delete(deleteCountryId).ConfigureAwait(false);
            if (!result.IsSuccess)
            {
                errorString = $"There was an error deleting the record. The error is: {result.Error}";
                deleteError = true;
                await InvokeAsync(StateHasChanged).ConfigureAwait(false);
                return;
            }

            Messenger.AddInformation(title: "Success", message: $"Country '{deleteCountryName}' deleted successfully.");

            deleteCountryId = default;
            deleteCountryName = string.Empty;

            if (isSearch)
            {
                await InvokeAsync(searchGrid.RefreshDataAsync).ConfigureAwait(false);
            }
            else
            {
                await InvokeAsync(dataGrid.RefreshDataAsync).ConfigureAwait(false);
            }

            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
            await CloseDeleteModal().ConfigureAwait(false);
        }
        catch (Exception)
        {
            errorString = $"There was an error deleting the country";
            await InvokeAsync(StateHasChanged).ConfigureAwait(false);
        }
    }

}
